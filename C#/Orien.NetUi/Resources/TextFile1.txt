using Orien.Tools;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace Orien.NetUi {

    public class McConsole : Form {
        private ToolStripMenuItem aboutMcConsoleToolStripMenuItem;
        private ToolStripMenuItem aboutToolStripMenuItem;
        private ToolStripMenuItem clearAllTabsToolStripMenuItem1;
        private ToolStripMenuItem clearCurrentTabToolStripMenuItem1;
        private ToolStripMenuItem exitToolStripMenuItem;
        private ToolStripMenuItem fileToolStripMenuItem;
        private MenuStrip mainMenu;
        private ToolStripMenuItem saveAsToolStripMenuItem;
        private ToolStripMenuItem showHelpToolStripMenuItem;
        private TabPage tabPage1;
        private RichTextBox rtextBox1;
        private TabControl mainTab;
        private ListBox autoCompleteBox;
        private SaveFileDialog saveFileDialog;
        private readonly Form form;

        /*private string[] colors = new string[]{"AliceBlue","AntiqueWhite","Aqua","Aquamarine","Azure",
"Beige","Bisque","Black","BlanchedAlmond","Blue","BlueViolet","Brown","BurlyWood"
,"CadetBlue","Chartreuse","Chocolate","Coral","CornflowerBlue","Cornsilk","Crimson"
,"Cyan","DarkBlue","DarkCyan","DarkGoldenrod","DarkGray","DarkGreen","DarkKhaki"
,"DarkMagenta","DarkOliveGreen","DarkOrange","DarkOrchid","DarkRed","DarkSalmon"
,"DarkSeaGreen","DarkSlateBlue","DarkSlateGray","DarkTurquoise","DarkViolet","DeepPink"
,"DeepSkyBlue","DimGray","DodgerBlue","Firebrick","FloralWhite","ForestGreen","Fuchsia"
,"Gainsboro","GhostWhite","Gold","Goldenrod","Gray","Green","GreenYellow","Honeydew"
,"HotPink","IndianRed","Indigo","Ivory","Khaki","Lavender","LavenderBlush","LawnGreen"
,"LemonChiffon","LightBlue","LightCoral","LightCyan","LightGoldenrodYellow","LightGray"
,"LightGreen","LightPink","LightSalmon","LightSeaGreen","LightSkyBlue","LightSlateGray"
,"LightSteelBlue","LightYellow","Lime","LimeGreen","Linen","Magenta","Maroon"
,"MediumAquamarine","MediumBlue","MediumOrchid","MediumPurple","MediumSeaGreen"
,"MediumSlateBlue","MediumSpringGreen","MediumTurquoise","MediumVioletRed","MidnightBlue"
,"MintCream","MistyRose","Moccasin","NavajoWhite","Navy","OldLace","Olive","OliveDrab"
,"Orange","OrangeRed","Orchid","PaleGoldenrod","PaleGreen","PaleTurquoise","PaleVioletRed"
,"PapayaWhip","PeachPuff","Peru","Pink","Plum","PowderBlue","Purple","Red","RosyBrown"
,"RoyalBlue","SaddleBrown","Salmon","SandyBrown","SeaGreen","SeaShell","Sienna","Silver"
,"SkyBlue","SlateBlue","SlateGray","Snow","SpringGreen","SteelBlue","Tan","Teal","Thistle"
,"Tomato","Transparent","Turquoise","Violet","Wheat","White","WhiteSmoke","Yellow","YellowGreen"
};*/
        private enum CMD {
            Help = 0,
            Hide = 1,
            Close = 2,
            Clear = 3,
            ClearAll = 4
        }

        #region Constructor

        public McConsole(Form parent = null) {
            if (parent != null) {
                form = this;
                this.Owner = parent;
                parent.FormClosed += new FormClosedEventHandler(OnOwnerClosed);
            }
            InitializeComponent();
        }

        #endregion

        #region Public Methods

        public void Log(string msg, string tabName = "General") => Log(msg, tabName, null);
        public void Log(string msg, string tabName = "General", params object[] args) {

            if (args != null) msg = string.Format(msg, args);
            if (tabName == "General") {

                rtextBox1.AppendText(msg);

            } else {

                TabPage tp = GetOrCreateTab(tabName);
                tp.AppendText(msg);
            }
            //if (console_parent != null) this.ShowDialog(console_parent); else this.Show();
            this.Show();
        }

        #endregion

        #region Private Methods

        private void AutocompleteCheck() {

            string word = GetCommand();
            if (word == null) return;
            string[] list = Enum.GetNames(typeof(CMD));
            // search word in enum list (ignoreCase = true)
            List<string> localList = list.Where(z => z.StartsWith(word, true)).ToList();
            if (localList.Any() && !string.IsNullOrEmpty(word)) {
                Console.WriteLine("Items found:{0}\n", localList.Join("\n\t"));
                autoCompleteBox.DataSource = localList;
                autoCompleteBox.Show();
                autoCompleteBox.Location = new Point(

                    0, CurrentTextRichBox.GetCaretPoint().Y + CurrentTextRichBox.GetLineHeight(word)
                );
                Focus();
                //AutoCompleteBox.BringToFront();
            }
        }

        internal string GetCommand() {

            if (CurrentTextRichBox != null && CurrentTextRichBox.Lines.Any()) {
                string lastLine = CurrentTextRichBox.Lines[CurrentTextRichBox.Lines.Length - 1];
                if (lastLine.Length == 0) {
                    return null;
                }

                if (lastLine[0] == ':') {
                    return lastLine.TrimStart(':');
                }
                //string lastword = lastLine.Split(' ').Last();
            }
            return null;
        }

        private void RunCmd(string cmd) {
            if (cmd.Length == 0) {
                return;
            }

            if (Enum.TryParse(cmd, true, out CMD n)) { //parse the enum with ignoreCase flag 
                Console.WriteLine("n:{0}", n);
                switch (n) {

                    case CMD.Help: ShowCommands(); break;
                    case CMD.Hide: form.Hide(); break;
                    case CMD.Clear: CurrentTextRichBox.Text = ""; break;
                    default: Log("\nCommand: ( " + cmd + " ) is not recognized."); break;
                }
            } else {
                Log("\nCommand: ( " + cmd + " ) is not recognized.");
            }
        }

        private void ShowCommands() {
            Log("\nCommands List:");
            foreach (string s in Enum.GetNames(typeof(CMD))) {
                Log("\t" + s);
            }
        }

        private TabPage GetOrCreateTab(string tabName) {

            TabPage tp = GetTab(tabName);
            return tp != null ? tp : AddTab(tabName);
        }

        private TabPage GetTab(string tabName) {

            foreach (TabPage tab in this.mainTab.TabPages) {
                if (tabName.Equals(tab.Name)) {
                    return tab;
                }
            }
            return null;
        }

        private RichTextBox CurrentTextRichBox => GetSelectedTabPage().GetTextBox();

        private TabPage GetSelectedTabPage() {
            return this.mainTab.TabPages.Count > 0 ? this.mainTab.SelectedTab : null;
        }

        private TabPage AddTab(string tabName) {

            TabPage tp = new TabPage(tabName);
            RichTextBox rtb = new RichTextBox();
            rtb.AcceptsTab = true;
            //rtb.TabStop = true;
            rtb.Dock = DockStyle.Fill;
            rtb.Name = "rtb";
            rtb.Text = "...";
            tp.Controls.Add(rtb);
            this.mainTab.TabPages.Add(tp);
            return tp;
        }

        private void RemoveTab(string tabName) {

            TabPage tp = GetTab(tabName);
            if (tp != null) mainTab.TabPages.Remove(tp);
        }

        private void ClearTabs() { //remove all except first one

            TabPage tp = mainTab.TabPages["General"];
            this.mainTab.TabPages.Clear();
            this.mainTab.TabPages.Add(tp);
        }

        #endregion

        #region Windows Form Designer generated code

        private void InitializeComponent() {
            this.mainMenu = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.saveAsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.clearAllTabsToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.clearCurrentTabToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.showHelpToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.aboutMcConsoleToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.mainTab = new System.Windows.Forms.TabControl();
            this.tabPage1 = new System.Windows.Forms.TabPage();
            this.autoCompleteBox = new System.Windows.Forms.ListBox();
            this.rtextBox1 = new System.Windows.Forms.RichTextBox();
            this.saveFileDialog = new System.Windows.Forms.SaveFileDialog();
            this.mainMenu.SuspendLayout();
            this.mainTab.SuspendLayout();
            this.tabPage1.SuspendLayout();
            this.SuspendLayout();
            // 
            // mainMenu
            // 
            this.mainMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.aboutToolStripMenuItem});
            this.mainMenu.Location = new System.Drawing.Point(0, 0);
            this.mainMenu.Name = "mainMenu";
            this.mainMenu.Size = new System.Drawing.Size(1008, 24);
            this.mainMenu.TabIndex = 1;
            this.mainMenu.Text = "menuStrip1";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.saveAsToolStripMenuItem,
            this.clearAllTabsToolStripMenuItem1,
            this.clearCurrentTabToolStripMenuItem1,
            this.exitToolStripMenuItem});
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(62, 20);
            this.fileToolStripMenuItem.Text = "Console";
            // 
            // saveAsToolStripMenuItem
            // 
            this.saveAsToolStripMenuItem.Name = "saveAsToolStripMenuItem";
            this.saveAsToolStripMenuItem.Size = new System.Drawing.Size(144, 22);
            this.saveAsToolStripMenuItem.Text = "Save As...";
            this.saveAsToolStripMenuItem.Click += new System.EventHandler(this.OnsaveAsToolStripMenuItem_Click);
            // 
            // clearAllTabsToolStripMenuItem1
            // 
            this.clearAllTabsToolStripMenuItem1.Name = "clearAllTabsToolStripMenuItem1";
            this.clearAllTabsToolStripMenuItem1.Size = new System.Drawing.Size(144, 22);
            this.clearAllTabsToolStripMenuItem1.Text = "Clear All";
            this.clearAllTabsToolStripMenuItem1.Click += new System.EventHandler(this.OnclearAllTabsToolStripMenuItem1_Click);
            // 
            // clearCurrentTabToolStripMenuItem1
            // 
            this.clearCurrentTabToolStripMenuItem1.Name = "clearCurrentTabToolStripMenuItem1";
            this.clearCurrentTabToolStripMenuItem1.Size = new System.Drawing.Size(144, 22);
            this.clearCurrentTabToolStripMenuItem1.Text = "Clear Current";
            this.clearCurrentTabToolStripMenuItem1.Click += new System.EventHandler(this.OnclearCurrentTabToolStripMenuItem1_Click);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(144, 22);
            this.exitToolStripMenuItem.Text = "Exit";
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.OnExitToolStripMenuItem_Click);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.showHelpToolStripMenuItem,
            this.aboutMcConsoleToolStripMenuItem});
            this.aboutToolStripMenuItem.Name = "aboutToolStripMenuItem";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(44, 20);
            this.aboutToolStripMenuItem.Text = "Help";
            // 
            // showHelpToolStripMenuItem
            // 
            this.showHelpToolStripMenuItem.Name = "showHelpToolStripMenuItem";
            this.showHelpToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
            this.showHelpToolStripMenuItem.Text = "View Help";
            // 
            // aboutMcConsoleToolStripMenuItem
            // 
            this.aboutMcConsoleToolStripMenuItem.Name = "aboutMcConsoleToolStripMenuItem";
            this.aboutMcConsoleToolStripMenuItem.Size = new System.Drawing.Size(180, 22);
            this.aboutMcConsoleToolStripMenuItem.Text = "About";
            this.aboutMcConsoleToolStripMenuItem.Click += new System.EventHandler(this.aboutMcConsoleToolStripMenuItem_Click);
            // 
            // mainTab
            // 
            this.mainTab.Controls.Add(this.tabPage1);
            this.mainTab.Dock = System.Windows.Forms.DockStyle.Fill;
            this.mainTab.Location = new System.Drawing.Point(0, 24);
            this.mainTab.Name = "mainTab";
            this.mainTab.SelectedIndex = 0;
            this.mainTab.Size = new System.Drawing.Size(1008, 338);
            this.mainTab.TabIndex = 2;
            this.mainTab.TabIndexChanged += new System.EventHandler(this.OnTabIndexChanged);
            // 
            // tabPage1
            // 
            this.tabPage1.Controls.Add(this.autoCompleteBox);
            this.tabPage1.Controls.Add(this.rtextBox1);
            this.tabPage1.Location = new System.Drawing.Point(4, 22);
            this.tabPage1.Name = "tabPage1";
            this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage1.Size = new System.Drawing.Size(1000, 312);
            this.tabPage1.TabIndex = 1;
            this.tabPage1.Text = "General";
            this.tabPage1.UseVisualStyleBackColor = true;
            // 
            // autoCompleteBox
            // 
            this.autoCompleteBox.Location = new System.Drawing.Point(17, 17);
            this.autoCompleteBox.Name = "autoCompleteBox";
            this.autoCompleteBox.Size = new System.Drawing.Size(180, 264);
            this.autoCompleteBox.TabIndex = 1;
            this.autoCompleteBox.Visible = false;
            // 
            // rtextBox1
            // 
            this.rtextBox1.AcceptsTab = true;
            this.rtextBox1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.rtextBox1.Location = new System.Drawing.Point(3, 3);
            this.rtextBox1.Name = "rtextBox1";
            this.rtextBox1.Size = new System.Drawing.Size(994, 306);
            this.rtextBox1.TabIndex = 0;
            this.rtextBox1.Text = "";
            this.rtextBox1.KeyDown += new System.Windows.Forms.KeyEventHandler(this.OnConsoleKeyDown);
            this.rtextBox1.KeyUp += new System.Windows.Forms.KeyEventHandler(this.OnConsoleKeyUp);
            // 
            // McConsole
            // 
            this.ClientSize = new System.Drawing.Size(1008, 362);
            this.Controls.Add(this.mainTab);
            this.Controls.Add(this.mainMenu);
            this.MainMenuStrip = this.mainMenu;
            this.Name = "McConsole";
            this.mainMenu.ResumeLayout(false);
            this.mainMenu.PerformLayout();
            this.mainTab.ResumeLayout(false);
            this.tabPage1.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        #region UI Events

        private void OnOwnerClosed(object sender, FormClosedEventArgs e) {
            form.Close();
        }

        private void OnConsoleKeyDown(object sender, KeyEventArgs e) {

            if (e.KeyCode == Keys.Enter) {
                string cmd = GetCommand();
                if (cmd != null) RunCmd(cmd);
            } else if (e.KeyCode == Keys.Tab && autoCompleteBox.Visible) {

                e.SuppressKeyPress = true; //prevent tab to be inserted in textbox
                CurrentTextRichBox.ReplaceLastLine(autoCompleteBox.SelectedItem.ToString());
            }
        }

        private void OnConsoleKeyUp(object sender, KeyEventArgs e) {

            if (autoCompleteBox.Visible) {
                if (e.KeyCode == Keys.Up) {

                    autoCompleteBox.SelectPrevItem();

                } else if (e.KeyCode == Keys.Down) {

                    autoCompleteBox.SelectNextItem();

                } else if (e.KeyCode == Keys.Tab) {

                    autoCompleteBox.Hide();
                }
            } else if (e.KeyCode != Keys.Enter) {

                AutocompleteCheck();
            }
        }

        private void OnTabIndexChanged(object sender, EventArgs e) {
        }

        #endregion

        #region Menu Events
        private void OnExitToolStripMenuItem_Click(object sender, EventArgs e) {

            this.Close();
        }

        private void OnclearCurrentTabToolStripMenuItem1_Click(object sender, EventArgs e) {

            CurrentTextRichBox.Clear();
        }
        private void OnsaveAsToolStripMenuItem_Click(object sender, EventArgs e) {

            TabPage tab = GetSelectedTabPage();
            // Initialize the SaveFileDialog to specify the RTF extention for the file.
            saveFileDialog.InitialDirectory = McDesktop.User_Directory + "\\" + tab.Text + ".rtf";
            saveFileDialog.DefaultExt = "*.rtf";
            saveFileDialog.Filter = "RTF bestanden (*.rtf)|*.rtf|" + "Tekst Bestanden|*.txt";
            saveFileDialog.FileName = tab.Text;
            // Determine whether the user selected a file name from the saveFileDialog.
            saveFileDialog.ShowDialog();
        }
        private void aboutMcConsoleToolStripMenuItem_Click(object sender, EventArgs e) {
            McConsoleAbout f = new McConsoleAbout {
                StartPosition = FormStartPosition.Manual
            };
            f.SetDesktopLocation(Cursor.Position.X, Cursor.Position.Y);
            f.ShowDialog();
        }

        #endregion

        private void OnclearAllTabsToolStripMenuItem1_Click(object sender, EventArgs e) {

            foreach (TabPage tp in mainTab.TabPages) tp.GetTextBox().Clear();
            //rtextBox1.Text = "";
            /*foreach (TabPage tp in mainTab.TabPages) {
               
                RichTextBox rtb = tp.GetTextBox();
                if (rtb != null) rtb.Clear();
            }*/
        }
    }


    #region RichTextBox Extensions
    internal static class RichTextBoxExtensions {

        internal static Point GetCaretPoint(this RichTextBox tb) {
            int start = tb.SelectionStart;
            if (start == tb.TextLength)
                start--;
            return tb.GetPositionFromCharIndex(start);
        }

        internal static int GetLineHeight(this RichTextBox tb, string word) {

            int textHeight;
            using (Graphics g = tb.CreateGraphics()) {
                textHeight = TextRenderer.MeasureText(g, word, tb.Font).Height;
            }
            return textHeight;
        }

        internal static bool ReplaceLastLine(this RichTextBox tb, string word) {

            int index = tb.SelectionStart;
            int lineNumber = tb.GetLineFromCharIndex(index);
            int first = tb.GetFirstCharIndexFromLine(lineNumber);
            if (first < 0) return false;
            int last = tb.GetFirstCharIndexFromLine(lineNumber + 1);
            tb.Select(first,
                last < 0 ? int.MaxValue : last - first - Environment.NewLine.Length);
            tb.SelectedText = ":" + word;
            return true;
        }
    }

    #endregion

    #region ListBox Extensions

    internal static class ListBoxExtensions {

        internal static bool SelectNextItem(this ListBox lbx) {

            int next = lbx.SelectedIndex + 1;
            if (next < lbx.Items.Count) {

                lbx.SelectedIndex = next;
                return true;
            };
            return false;
        }
        internal static bool SelectPrevItem(this ListBox lbx) {

            int prev = lbx.SelectedIndex - 1;
            if (prev >= 0) {

                lbx.SelectedIndex = prev; return true;
            };
            return false;
        }
    }

    #endregion

    #region Tab Extensions

    internal static class TabExtensions {

        internal static RichTextBox GetTextBox(this TabPage tp) {

            return (tp.Controls.ContainsKey("rtb")) ? (RichTextBox)tp.Controls["rtb"] : null;
        }
        internal static void AppendText(this TabPage tp, string str) {

            tp.GetTextBox().AppendText(str);
        }
    }

    #endregion
}


/*
mainTab.SelectTab(index);
int index = mainTab.SelectedIndex;
mainTab.SelectTab(tp);
TabItem ti = mainTab.Items.First(t => t.Name == "WelcomTabItem");
mainTab.Items.Clear();
mainTab.Items.Add(ti) 
mainTab.Items.RemoveAll(ti => ((TabItem)ti).Name != "welcomeTabItem");
*/
