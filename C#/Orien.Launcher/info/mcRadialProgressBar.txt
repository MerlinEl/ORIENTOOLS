using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Windows.Forms;

/**
private readonly mcRadialProgressBar prog_bar = new mcRadialProgressBar();
//Progressbar setup
prog_bar.Anchor = AnchorStyles.None;
prog_bar.BackColor = Color.Transparent;
prog_bar.Font = new Font("Impact", 30F, FontStyle.Regular, GraphicsUnit.Point, 178);
prog_bar.ForeColor = Color.FromArgb(215, 247, 122);
prog_bar.InnerColor = mcUiGlobal.TRANSPARENT_COLOR; //inner circle color
prog_bar.InnerMargin = 0;
prog_bar.InnerWidth = -1;
prog_bar.Size = new Size(248, 248); //perimeter
prog_bar.Location = McMath.GetBoundsCenter(Bounds, prog_bar.Bounds);
prog_bar.Name = "progBar";
prog_bar.OuterColor = Color.Gray; //progress background color
prog_bar.OuterMargin = -25;
prog_bar.OuterWidth = 26;
prog_bar.ProgressColor = Color.FromArgb(0, 255, 0);
prog_bar.ProgressWidth = 20; //circle thickness
prog_bar.TabIndex = 8;
prog_bar.Text = "0%";
prog_bar.TextMargin = new Padding(0, -5, 0, 0);
prog_bar.Value = 0;
prog_bar.Minimum = 0;
prog_bar.Maximum = 100;

public void progressTo(int val) {

    int percent = McMath.minMax(val, 1, 100); //min-max val correction
    System.Threading.Thread.Sleep(2);
    prog_bar.Value = percent;
    prog_bar.Text = percent.ToString() + "%";
    prog_bar.Update();
    //Console.WriteLine("progress:" + percent.ToString());
    if ( percent == 100 ) { //when is finished
        Console.WriteLine("progress done with:" + percent.ToString());
        if ( NeedConfirmToClose ) {
            if ( ShowConfirmButtonOnDone ) showOkButton(true);
        } else Close();
    }
}
public void Reset() {
    prog_bar.Value = 0;
    prog_bar.Text = "0%";
    btn_ok.Visible = false;
}   
*/
namespace Orien.NetUi {
    /// <summary>
    ///     The circular progress bar windows form control
    ///     https://github.com/falahati/CircularProgressBar
    ///     https://github.com/falahati/WinFormAnimation
    /// </summary>
    [ToolboxItem(true)]
    [ToolboxBitmap(typeof(mcRadialProgressBar), "mcRadialProgressBar.bmp")]
    [DefaultBindingProperty("Value")]
    public class mcRadialProgressBar : ProgressBar {

        private Brush _backBrush;

        /// <summary>
        ///     Initializes a new instance of the <see cref="mcRadialProgressBar" /> class.
        /// </summary>
        public mcRadialProgressBar() {
            SetStyle(
                ControlStyles.SupportsTransparentBackColor |
                ControlStyles.AllPaintingInWmPaint |
                ControlStyles.UserPaint |
                ControlStyles.OptimizedDoubleBuffer |
                ControlStyles.ResizeRedraw, true);
            StartAngle = 270;
            // Child class should be responsible for handling this values at the constructor
            // ReSharper disable DoNotCallOverridableMethodsInConstructor
            BackColor = Color.Transparent;
            ForeColor = Color.FromArgb(64, 64, 64);
            DoubleBuffered = true;
            Font = new Font(Font.FontFamily, 72, FontStyle.Bold);
            // ReSharper restore DoNotCallOverridableMethodsInConstructor
            OuterMargin = -25;
            OuterWidth = 26;
            OuterColor = Color.Gray;
            ProgressWidth = 25;
            ProgressColor = Color.FromArgb(255, 128, 0);
            InnerMargin = 2;
            InnerWidth = -1;
            InnerColor = Color.FromArgb(224, 224, 224);
            TextMargin = new Padding(8, 8, 0, 0);
            Value = 68;
            Size = new Size(320, 320);
        }

        /// <summary>
        ///     Gets or sets the font of text in the <see cref="mcRadialProgressBar" />.
        /// </summary>
        /// <returns>
        ///     The <see cref="T:System.Drawing.Font" /> of the text. The default is the font set by the container.
        /// </returns>
        [EditorBrowsable(EditorBrowsableState.Always)]
        [Browsable(true)]
        public override Font Font {
            get => base.Font;
            set => base.Font = value;
        }

        /// <summary>
        /// </summary>
        [Category("Appearance")]
        public Color InnerColor { get; set; }

        /// <summary>
        /// </summary>
        [Category("Layout")]
        public int InnerMargin { get; set; }

        /// <summary>
        /// </summary>
        [Category("Layout")]
        public int InnerWidth { get; set; }

        /// <summary>
        /// </summary>
        [Category("Appearance")]
        public Color OuterColor { get; set; }

        /// <summary>
        /// </summary>
        [Category("Layout")]
        public int OuterMargin { get; set; }

        /// <summary>
        /// </summary>
        [Category("Layout")]
        public int OuterWidth { get; set; }

        /// <summary>
        /// </summary>
        [Category("Appearance")]
        public Color ProgressColor { get; set; }

        /// <summary>
        /// </summary>
        [Category("Layout")]
        public int ProgressWidth { get; set; }

        /// <summary>
        /// </summary>
        [Category("Layout")]
        public int StartAngle { get; set; }

        /// <summary>
        ///     Gets or sets the text in the <see cref="mcRadialProgressBar" />.
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Always)]
        [Browsable(true)]
        public override string Text {
            get => base.Text;
            set => base.Text = value;
        }

        /// <summary>
        /// </summary>
        [Category("Layout")]
        public Padding TextMargin { get; set; }

        private static PointF AddPoint(PointF p, int v) {
            p.X += v; p.Y += v; return p;
        }

        private static SizeF AddSize(SizeF s, int v) {
            s.Height += v; s.Width += v; return s;
        }

        private static Rectangle ToRectangle(RectangleF rect) {
            return new Rectangle((int)rect.X, (int)rect.Y, (int)rect.Width, (int)rect.Height);
        }

        /// <inheritdoc />
        protected override void OnLocationChanged(EventArgs e) {
            base.OnLocationChanged(e);
            Invalidate();
        }

        /// <summary>
        ///     Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.
        /// </summary>
        /// <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data. </param>
        protected override void OnPaint(PaintEventArgs e) {
            try {
                if ( _backBrush == null ) { RecreateBackgroundBrush();}
                StartPaint(e.Graphics);
            } catch {}
        }

        /// <inheritdoc />
        protected override void OnParentBackColorChanged(EventArgs e) {
            RecreateBackgroundBrush();
        }

        /// <inheritdoc />
        protected override void OnParentBackgroundImageChanged(EventArgs e) {
            RecreateBackgroundBrush();
        }

        /// <inheritdoc />
        protected override void OnParentChanged(EventArgs e) {
            if ( Parent != null ) {
                Parent.Invalidated -= ParentOnInvalidated;
                Parent.Resize -= ParentOnResize;
            }

            base.OnParentChanged(e);

            if ( Parent != null ) {
                Parent.Invalidated += ParentOnInvalidated;
                Parent.Resize += ParentOnResize;
            }
        }

        /// <inheritdoc />
        protected override void OnStyleChanged(EventArgs e) {
            base.OnStyleChanged(e);
            Invalidate();
        }

        /// <summary>
        ///     Occurs when parent's display requires redrawing.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="invalidateEventArgs"></param>
        protected virtual void ParentOnInvalidated(object sender, InvalidateEventArgs invalidateEventArgs) {
            RecreateBackgroundBrush();
        }

        /// <summary>
        ///     Occurs when the parent resized.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="eventArgs"></param>
        protected virtual void ParentOnResize(object sender, EventArgs eventArgs) {
            RecreateBackgroundBrush();
        }

        /// <summary>
        ///     Update or create the brush used for drawing the background
        /// </summary>
        protected virtual void RecreateBackgroundBrush() {
            lock ( this ) {
                _backBrush?.Dispose();
                _backBrush = new SolidBrush(BackColor);

                if ( BackColor.A == 255 ) {
                    return;
                }

                if ( Parent != null && Parent.Width > 0 && Parent.Height > 0 ) {
                    using ( var parentImage = new Bitmap(Parent.Width, Parent.Height) ) {
                        using ( var parentGraphic = Graphics.FromImage(parentImage) ) {
                            var pe = new PaintEventArgs(parentGraphic,
                                new Rectangle(new Point(0, 0), parentImage.Size));
                            InvokePaintBackground(Parent, pe);
                            InvokePaint(Parent, pe);

                            if ( BackColor.A > 0 ) // Translucent
                            {
                                parentGraphic.FillRectangle(_backBrush, Bounds);
                            }
                        }

                        _backBrush = new TextureBrush(parentImage);
                        ( (TextureBrush)_backBrush ).TranslateTransform(-Bounds.X, -Bounds.Y);
                    }
                } else {
                    _backBrush = new SolidBrush(Color.FromArgb(255, BackColor));
                }
            }
        }

        /// <summary>
        ///     The function responsible for painting the control
        /// </summary>
        /// <param name="g">The <see cref="Graphics" /> object to draw into</param>
        protected virtual void StartPaint(Graphics g) {
            try {
                lock ( this ) {
                    g.TextRenderingHint = TextRenderingHint.AntiAlias;
                    g.SmoothingMode = SmoothingMode.AntiAlias;
                    var point = AddPoint(Point.Empty, 2);
                    var size = AddSize(Size, -2 * 2);

                    if ( OuterWidth + OuterMargin < 0 ) {
                        var offset = Math.Abs(OuterWidth + OuterMargin);
                        point = AddPoint(Point.Empty, offset);
                        size = AddSize(Size, -2 * offset);
                    }

                    if ( OuterColor != Color.Empty && OuterColor != Color.Transparent && OuterWidth != 0 ) {
                        g.FillEllipse(new SolidBrush(OuterColor), new RectangleF(point, size));

                        if ( OuterWidth >= 0 ) {
                            point = AddPoint(point, OuterWidth);
                            size = AddSize(size, -2 * OuterWidth);
                            g.FillEllipse(_backBrush, new RectangleF(point, size));
                        }
                    }

                    point = AddPoint(point, OuterMargin);
                    size = AddSize(size, -2 * OuterMargin);

                    g.FillPie(
                        new SolidBrush(ProgressColor),
                        ToRectangle(new RectangleF(point, size)), StartAngle, Value / ( Maximum - Minimum ) * 360);

                    if ( ProgressWidth >= 0 ) {
                        point = AddPoint(point, ProgressWidth);
                        size = AddSize(size, -2 * ProgressWidth);
                        g.FillEllipse(_backBrush, new RectangleF(point, size));
                    }

                    point = AddPoint(point, InnerMargin);
                    size = AddSize(size, -2 * InnerMargin);

                    if ( InnerColor != Color.Empty && InnerColor != Color.Transparent && InnerWidth != 0 ) {
                        g.FillEllipse(new SolidBrush(InnerColor), new RectangleF(point, size));

                        if ( InnerWidth >= 0 ) {
                            point = AddPoint(point, InnerWidth);
                            size = AddSize(size, -2 * InnerWidth);
                            g.FillEllipse(_backBrush, new RectangleF(point, size));
                        }
                    }

                    //Draw Text Label 
                    if ( Text == string.Empty ) {
                        return;
                    }

                    point.X += TextMargin.Left;
                    point.Y += TextMargin.Top;
                    size.Width -= TextMargin.Right;
                    size.Height -= TextMargin.Bottom;
                    var stringFormat =
                        new StringFormat(RightToLeft == RightToLeft.Yes ? StringFormatFlags.DirectionRightToLeft : 0) {
                            Alignment = StringAlignment.Center,
                            LineAlignment = StringAlignment.Near
                        };
                    var textSize = g.MeasureString(Text, Font);
                    var textPoint = new PointF(
                        point.X + ( size.Width - textSize.Width ) / 2,
                        point.Y + ( size.Height - textSize.Height ) / 2);

                    g.DrawString(
                        Text,
                        Font,
                        new SolidBrush(ForeColor),
                        new RectangleF(textPoint, textSize),
                        stringFormat);
                }
            } catch {
                //Console.WriteLine("mcRadialProgressBar > catch");
                // ignored
            }
        }
    }
}